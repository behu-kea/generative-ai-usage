Hey ChatGPT...

You will help create an individual lesson plan for a specific day. The lesson plan will be for a software development class.

To generate a lesson plan start with asking the user for the following:

1. What programming language?
2. How long is the class?
3. What topics should the students learn in the class?
4. What prerequisites are relevant for the class?

Now generate the lesson plan. The lesson plan should be didactical and padegogical excellent. The material should be explained well with good code examples supplying the topics and the material. The lesson plan should be outputted as markdown. When the markdown is generated save it to a new file. The exercises should be interesting, real world and unique. Every exercise should have a level

Here are some examples:
Example 1
User input:

1. Javascript
2. 3.5 hours
3. Functions, calling them with arguments, parameters, return value, scope
4. The students have learned about variables, loops, conditional and arrays

functions.md
---
# Functions

## Hiding abstraction

Lets begin with a good old metaphor. Imagine you have a huge machine. The machine has lots of things you can control. Like a lever, 3 buttons, a pulley and wheel and much more. All of this affects what happens inside the machine. It works by giving the machine some input. Now the input is transformed through the machine and in the end you get an output.

![Maching method metaphor](../assets/method-machine.png)

Imagine now that the machine is actually a **function**, the inputs to the method is called **arguments**, the things that control the method are called **parameters**, the output of the machine is called a **return value**. That might not make a lot of sense for now, but keep the metaphor of the machine, it will get handy later on!

## Calling functions

There are two sides to functions: a creation side and a usage side. The usage side you have actually already been using quite a lot. Let's take a closer look at some examples:

### Calling a function with no arguments

```javascript
Math.random();
```

Here we are actually calling a function called `random`. **Calling a function is done by writing the function name and then open and close parentheses `()`**. So we are calling the function with the name of `random`. Calling this function will give us a random number between 0 and 1

```javascript
console.log(Math.random()); // Will log a new number each time fx: 0.23029599683254565
```

Let's take a look at another function called `trim`:

```javascript
const trimmedString = "  string with messy spaces.   ".trim();
console.log(trimmedString); // Will log: "string with messy spaces."
```

`trim` will remove the trailing spaces in a string. Again here we are calling the function with the name of `trim` by writing the function name and `()`

> üí° A very common beginner mistake is to **forget to call your function!**

### Calling a function with arguments

Simply calling a function and getting something back is fine. But sometimes we want to give a function some data to work with (input). That we do through arguments. Let's take an example üëá

```javascript
console.log("Hello");
```

Here we are calling a function called `log`. Inside of the parentheses we put the arguments. In this case we have one argument: the string `hello`. To sum up we are calling the function `log` with the argument of `hello`

#### Multiple arguments

A function can have multiple arguments. Each argument is seperated by a comma

```javascript
const maxNumber = Math.max(3, 5);
console.log(maxNumber); // Will log: 5
```

Here we are calling a function called `max` with the arguments of `3` and `5`

> üß† Remember this: **The values we call a function with are called agruments!**

## Creating a function

Now let's talk about creating our own function.

Let's create a function called `printHello`, which will print 'Hello' to the console.

```javascript
function printHello() {
  console.log("Hello");
}
```

To create a function we use the `function` keyword. After the keyword we write the name of the function. In this case we chose to name it `printHello`. Then we open and close parentheses and curly brackets `{ }`. Inside the curly brackets we write the code we want to run when we call the function. This is called the function body

Let's call the function we just created üëá

```javascript
function printHello() {
  console.log("Hello");
}

printHello(); // This will log out Hello to the console
```

### Function with parameters

We can also create functions which can take parameters. Let's create a function that logs a name out to the console

```javascript
function printName(name) {
  console.log(name);
}

printName("Tine"); // Will log: Tine
```

In the example above we have given the `printName` function the parameter `name`. This means we can pass in a value when we call the function. In this case we passed in the string `Tine`.

A parameter is a placeholder value for what the function it is called with! If the function `printName` is called with the value of `"Tine"` then the parameter `name` will get the value of `"Tine"`. If `printName` is called with the value of `"Jens"` then the parameter `name` will get the value of `"Jens"`.

The parameter is like a shapeshifter it changes all the time depending on what the function is being called with!!!!

```javascript
function printName(name) {
  console.log(name);
}

printName("Jens"); // Will log: Jens
```

#### Multiple parameters

We can also have multiple parameters. The parameters should be seperated by comma

```javascript
function printNameAndAge(name, age) {
  console.log(`${name} is ${age} years old`);
}

printNameAndAge("Tine", 29); // Will log: Tine is 29 years old
```

Here we have given the `printNameAndAge` function two parameters. We can pass a value for both parameters. The first value will be assigned to the first parameter `name` and the second value will be assigned to the second parameter `age`.

### Arguments vs parameters

For some reason, we often get confused between **arguments** and **parameters**. Let's go through it again.

**Arguments** are the values we call a function with.

**Parameters** are the placeholder values for the arguments.

![Arguments vs parameters](../assets/arguments-vs-parameters.png)

### Return value

Instead of just console logging the result inside of a function we can actually get that value by returning it. Let's rewrite our `printNameAndAge` function

```javascript
function printNameAndAge(name, age) {
  const stringToReturn = `${name} is ${age} years old`;
  return stringToReturn;
}
// The result of the string literal will be returned nameAndAgeString will then capture it
const nameAndAgeString = printNameAndAge("Tine", 29);
console.log(nameAndAgeString); // Tine is 29 years old
```

Now `printNameAndAge` first creates the string to be returned called `stringToReturn`. Then that string is returned. The return value is captured in the `nameAndAgeString` variable.

![Function complete](../assets/function-complete.png)

## Scope

Scope defines where a variable exists (lives). There are two kinds of scope:

1. Global scope
2. Local scope

### Global scope

Global scope is when a variable is defined on the top level. Meaning in the top of the javascript file. This variable can be reached everywhere in the file.

```javascript
const name = "Ahmed";

function printName() {
  // The variable name can be reached here
  console.log(name);
}
```

Here the function `printName` has access to the variable `name` because `name` is defined in the global scope

### Local scope

Local scope is when a variable is defined and lives within local scope (defined by curly braces`{}`)

```javascript
{
  // name only exists within the curly brackets!
  const name = "Camilla";
}

console.log(name); // ERROR: Name is not defined
```

The same with functions:

```javascript
function sum(number1, number2) {
  const sumOfNumbers = number1 + number2;
  // After the close curly brackets sumOfNumbers stops existing!
}
sum(1, 2);

console.log(sumOfNumbers); // ERROR: sumOfNumbers is not defined!
```

And the same with if sentences and loops, anything with curly braces!

So how can we fix the code above? We define the variable outside

```javascript
// now we need let because we want to reassign sumOfNumbers
let sumOfNumbers;
function sum(number1, number2) {
  sumOfNumbers = number1 + number2;
}
sum(1, 2);
console.log(sumOfNumbers); // 3
```

## Exercises

### üìù Exercise 1 - level 1

Create a function that takes a string and then logs that string out

```javascript
someFunctionName("hello"); // logs out hello
someFunctionName("abcde"); // logs out abcde
```

### üìù Exercise 1.1 - level 1

Create a function that adds two numbers together. The added number should be returned

```javascript
const returnedNumber = someFunctionName(2, 6);
console.log(returnedNumber); // 8
```

### üìù Exercise 2 - level 2

Create a function that takes a name and returns `true` if the first character is the character `a` otherwise `false`

```javascript
console.log(someFunctionName("kea")); // false
console.log(someFunctionName("anna")); // true
```

_Hint: Check out [https://stackoverflow.com/questions/3427132/how-to-get-first-character-of-string](https://stackoverflow.com/questions/3427132/how-to-get-first-character-of-string)_

### üìù Exercise 3 - level 2

Create a function called `celciusToFahreneit` it should have a parameter called `celcius`.

It should return a string in the following format `CONVERTED_TEMPERATURE degree fahrenheit` fx `23 degree fahrenheit`

Think carefully about

- What the parameter name should be
- Creating good names for any variables you use
- Don't use `console.log` inside the body of the function!

Try call the function and check with google if the function returns the right value.

```javascript
console.log(celciusToFahreneit(30)); // 86 degree fahrenheit
```

### üìù Exercise 4 - level 2

Create a function called `increaseByHalf` that should

- Take a number as an input
- Return this input number **increased by a half**

Here is an example of the output

```javascript
console.log(increaseByHalf(50)); // 75
console.log(increaseByHalf(100)); // 150
```

### üìù Exercise 5 - level 1

Check out the code below:

```javascript
function printMessage(x) {
  console.log("Hello, nice to meet you " + x);
}

function getMessage(name) {
  return "Hello, nice to meet you " + name;
}

printMessage("Mitch");
printMessage("August");
getMessage("Laetitia");
```

The functions above behave similarly but _differ_ in some important ways.

Study the code above and then answer the following questions:

1. How many times is the function `printMessage` called ?
2. How many times is the function `getMessage` called ?
3. What is the parameter name for the function `printMessage` ?
4. What is the parameter name for the function `getMessage` ?

> Taken from [Code your future](https://syllabus.codeyourfuture.io/js-core-1/week-1/lesson/#functions)

### üìù Exercise 6 - level 2

Create a function that has two parameters: `stringToLog` and `numberOfTimesToLog`

When calling the function it should log out the `stringToLog` the amount of times specified in `numberOfTimesToLog`

Here is an example of the output üëá

```javascript
logString("hello", 3);
// hello
// hello
// hello
```

### üìù Exercise 7 - level 2

When working with data we often need to convert data from one format to another therefore: Create a function that takes a date in the following format: `MONTH/DAY/YEAR` fx `10/24/2022`. It should return a date in the following format: `DAY-MONTH-YEAR` fx `24-10-2022`

_Hint: research the `.split` method_

```javascript
const reformattedDate = someFunctionName("10/24/2022");
console.log(reformattedDate); // 24-10-2022

const reformattedDate = someFunctionName("5/9/2020");
console.log(reformattedDate); // 9-5-2020
```

### üìù Exercise 8 - level 3

Create a function (that you have to name) that has temperature as parameter. Based on the temperature it should return a string with what the user should wear. You decide what the user should wear based on the temperature.

An example is:

```javascript
const clothesToWear = youCreateThisFunctionName(18);
console.log(clothesToWear); // Logs out: "shorts and a t-shirt"
```

![Wearing jackets](https://media.giphy.com/media/26u6dryuZH98z5KuY/giphy.gif)

### üìù Exercise 9 - level 2

Imagine we work at a company. Peter from the HR department wants us to send out a couple of emails to some recepients. The only problem is that he sent us the email in a weird format: `benjamin@gmail.com|peter@gmail.com|hans@gmail.com|ahmad@gmail.com|sana@gmail.com|virgeen@gmail.com|mohammed@gmail.com`

Use the `sendEmailTo` function to send an email to all the recepients that we got from Peter.

_Hint_ use the `.split` method and look up `iterating an array js for loop` on google.

```javascript
// This function emulates sending emails to receipients
function sendEmailTo(recepient) {
  // But really it only logs out a string
  console.log("email sent to " + recepient);
}
```

### üìù Exercise 10 - level 3

Another customer has contacted us. He works for a secret company that rimes with foogle. The customer works on their calendar application. They need some functionality to help with writing what weekday an event is held.

You specify how many days from today an event is being held. The function then figures out what weekday the event is being held. Here is an example:

Today is Sunday and the event is in 5 days. Therefore the event will be held on a friday.

```javascript
// With todays weekday a tuesday
console.log(getEventWeekday(9)); // Logs out "Thursday"

// With todays weekday a Friday
console.log(getEventWeekday(2)); // Logs out "Sunday"
```

You should get the today's day from the system.

Hint: use remainder operator, array indexes and investigate `new Date` in js.

---

Example 2
User input:

1. Javascript
2. 3.5 hours
3. Creating an array. Index. Array methods: push and indexOf. Iterating an array. Conditional logic in array
4. The students have learned about variables, loops, conditional

arrays.md
---

## Creating an array

If you ever find yourself writing code like this...

```javascript
const mentor1 = "Daniel";
const mentor2 = "Irina";
const mentor3 = "Rares";
```

...then it's probably time to use an **array**!

Arrays are data structures that hold a list of values. We call these values the **elements** of the array.

```javascript
const mentors = ["Daniel", "Irina", "Rares"];
```

Arrays can hold any type of value (although almost always you only have one data type per array).

```javascript
const testScores = [16, 49, 85];
const grades = ["F", "D", "A"];
const greetings = ["Hello, how are you?", "Hi! Nice to meet you!"];
```

### Index

An array is based on an index. The first element is saved at index 0

### ![image-20220914094110716](assets/image-20220914094110716.png)

### Accessing elements using index

You can access elements in an array using the **index** of an element with **bracket notation**. If you want the first element you use index 0 which can cause some confusion üò±

```javascript
const trainees = ["Ahmed", "Maria", "Atanas", "Nahidul", "Jack"];
trainees[0]; // "Ahmed"
trainees[3]; // "Nahidul"
```

**üîî Remember:** All arrays start at position 0! To access the first element in an array, you need to access index `0`, the second element at `1`. There are some [very intense reasons for this](http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html), but most people just accept it and move on.

### Assigning elements

You can also _assign_ new values to parts of an array:

```javascript
const trainees = ["Ahmed", "Maria", "Atanas", "Nahidul", "Jack"];

trainees[2] = "Bianca";

console.log(trainees); // ["Ahmed", "Maria", "Bianca", "Nahidul", "Jack"]
```

### `.length`

To get the number of elements in an array you can use the `.length` property

```javascript
const trainees = ["Ahmed", "Maria", "Atanas", "Nahidul", "Jack"];

console.log(trainees.length); // 5
```

### üìù Exercise 1 - level 1

Create an array that contains a list of your interests. Get the number of interests you have added to the list. Give the variable a good name

Log out the following string `I have 10 interests`

### üìù Exercise 2 - level 1

Using the following array

```javascript
const fruits = ["banana", "apple", "strawberry", "kiwi", "fig", "orange"];
```

Now, using the correct indexes, print the following values from the array:

- strawberry
- kiwi
- orange
- banana

_taken from https://syllabus.codeyourfuture.io/js-core-1/week-2/lesson#arrays_

### üìù Exercise 3 - level 2

Write some code that can get the first and last elements in an array.

```javascript
const names = ['Peter', 'Susan', 'Charlotte'];
// Use the names array
const firstNameInArray = YOU WRITE CODE HERE;
const lastNameInArray = YOU WRITE CODE HERE;

console.log(firstNameInArray); // Peter
console.log(lastNameInArray); // Charlotte

const fruits = ['pear', 'banana', 'apple', 'grape'];
const firstFruitInArray = YOU WRITE CODE HERE;
const lastFruitInArray = YOU WRITE CODE HERE;

console.log(firstFruitInArray); // pear
console.log(lastFruitInArray); // grape
```

## Array methods

There are **lots** of different array methods. Today we will focus the two most important ones

### `.push`

Elements can be "pushed" into an array. The pushed element will figure as the latest element.

```javascript
const trainees = ["Ahmed", "Maria", "Atanas", "Nahidul", "Jack"];

trainees.push("Nicklas");

console.log(trainees); // ["Ahmed", "Maria", "Bianca", "Nahidul", "Jack", "Nicklas"]
```

### `.indexOf`

If you know the value and want the index number, you can use indexOf

```javascript
const trainees = ["Ahmed", "Maria", "Atanas", "Nahidul", "Jack"];

const indexOfMaria = trainees.indexOf("Maria");

console.log(indexOfMaria); // 1
```

More methods documented [here](https://www.w3schools.com/js/js_array_methods.asp)

### üìù Exercise 4 - Favorite Songs - level 2

1. Create an array called `favoriteSongs` and add five of your favorite song titles.
2. Use the `.push` method to add another song to the end of the array.
3. Use the `indexOf` method to find the position of a song in the array.

## Iterating an array

Iterating an array is about going through each element in an array. Here is an example

```javascript
const names = ["Benjamin", "Mie", "Klara"];
// Instead of doing this üëá (what if we had 1000 elements in the array üò±)
console.log(names[0]); // Benjamin
console.log(names[1]); // Mie
console.log(names[2]); // Klara

// Do this:
for (const name of names) {
  // This log is called 3 times because there are 3 elements in the array
  console.log(name);
}
// this will log Benjamin then Mie then Klara
```

### For...of

```javascript
const cars = ["fiat", "volvo", "peugeot"];

for (const car of cars) {
  console.log(car);
}

// Output: "fiat"
// Output: "volvo"
// Output: "peugeot"
```

### ForEach

Does the same, but we can get the index aswell!

```javascript
const cars = ["fiat", "volvo", "peugeot"];

cars.forEach((car, index) => {
  console.log(index, car);
});

// Output: "0 fiat"
// Output: "1 volvo"
// Output: "2 peugeot"
```

### üìù Exercise 6 - In class let's analyze this code

```javascript
let b = [3, 7, 2, 9, 5];
let r = [];
let t = 0;

for (let p = 0; p < b.length; p++) {
  t = b[p] * 2;
  r[r.length] = t;
}

for (let x = 0; x < r.length; x++) {
  console.log("r is: " + r[x]);
}
```

### üìù Exercise 5 - teachers and students

Duration: 20 min

In the following exercise one group will randomly be selected to be teachers and the other group will be students

In groups of two people prepare a small 5 minute lecture. The lecture should explain the topic of **forEach** or **for...of** any way you like. That might be with a small slideshow or it might be with code, thats up to you.

- As teachers present the 5 minute lecture
- As students ask good interesting questions

### üìù Exercise 7 - Analyze this code

Ask the following questions

- What does this code do/what should it do?
- How would you improve it?
- Does it work?
- Do you like the variable names?
- Is the code easy to understand?

```javascript
let givenArray = [1, 2, 3, 4, 5];
let revarr = [];

givenArray.forEach((element, index) => {
  revarr[index] = givenArray[givenArray.length + index];
});

console.log(revarr);
```

### üìù Exercise 8 - level 2

Given the following array:

```javascript
const words = ["apple", "banana", "cherry", "date", "elderberry"];
```

Write a program that prints out each word and its length.

Here is the expected output:

```
apple: 5
banana: 6
cherry: 6
date: 4
elderberry: 10
```

### üìù Exercise 9 - level 2

Given the following array:

```javascript
const animals = ["cat", "dog", "bird", "fish", "elephant"];
```

Write code that finds the index of 'bird' in the array and then replaces it with 'parrot'. Print the updated array.

Expected output: `['cat', 'dog', 'parrot', 'fish', 'elephant']`

### üìù Exercise 10 - level 3

Given the following array:

```javascript
const grades = [85, 90, 78, 88, 76, 95, 89];
```

Write code that

1. Calculates the total grades from the array
2. Calculates the average grades in the the array

Expected output: `Average grade is 86`

### üìù Exercise 11 - level 3

Using the following array:

```javascript
const words = ["apple", "banana", "cherry", "date", "fig"];
```

Write code that prints the words that have more than 5 letters.

Expected output: `banana cherry`

### üìù Exercise 12 - level 3: Data Filtering

You are given an array of user input data. Each item in the array is a string that a user has entered into a search bar on a website.

```javascript
const searchData = [
  "apple",
  "banana  ",
  "  Cherry",
  "apple ",
  "APPLE",
  "  Banana",
];
```

1. Clean the data: Remove any leading or trailing whitespace from each item.
2. Standardize the data: Convert all items to lowercase so that the search is case-insensitive.
3. Remove any duplicate items from the array.

Print the cleaned and standardized array

Expected output: `['apple', 'banana', 'cherry']`

---

Please output the lesson plan in the same style as the example
